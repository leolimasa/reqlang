/*
* generated by Xtext
*/
grammar InternalReqLang;

options {
	superClass=AbstractInternalContentAssistParser;
	
}

@lexer::header {
package com.leo_sa.ui.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package com.leo_sa.ui.contentassist.antlr.internal; 

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.DFA;
import com.leo_sa.services.ReqLangGrammarAccess;

}

@parser::members {
 
 	private ReqLangGrammarAccess grammarAccess;
 	
    public void setGrammarAccess(ReqLangGrammarAccess grammarAccess) {
    	this.grammarAccess = grammarAccess;
    }
    
    @Override
    protected Grammar getGrammar() {
    	return grammarAccess.getGrammar();
    }
    
    @Override
    protected String getValueForTokenName(String tokenName) {
    	return tokenName;
    }

}




// Entry rule entryRuleModel
entryRuleModel 
:
{ before(grammarAccess.getModelRule()); }
	 ruleModel
{ after(grammarAccess.getModelRule()); } 
	 EOF 
;

// Rule Model
ruleModel
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getModelAccess().getModulesAssignment()); }
(rule__Model__ModulesAssignment)*
{ after(grammarAccess.getModelAccess().getModulesAssignment()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleModule
entryRuleModule 
:
{ before(grammarAccess.getModuleRule()); }
	 ruleModule
{ after(grammarAccess.getModuleRule()); } 
	 EOF 
;

// Rule Module
ruleModule
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getModuleAccess().getGroup()); }
(rule__Module__Group__0)
{ after(grammarAccess.getModuleAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleClass
entryRuleClass 
:
{ before(grammarAccess.getClassRule()); }
	 ruleClass
{ after(grammarAccess.getClassRule()); } 
	 EOF 
;

// Rule Class
ruleClass
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getClassAccess().getGroup()); }
(rule__Class__Group__0)
{ after(grammarAccess.getClassAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleProperty
entryRuleProperty 
:
{ before(grammarAccess.getPropertyRule()); }
	 ruleProperty
{ after(grammarAccess.getPropertyRule()); } 
	 EOF 
;

// Rule Property
ruleProperty
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getPropertyAccess().getGroup()); }
(rule__Property__Group__0)
{ after(grammarAccess.getPropertyAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleFunction
entryRuleFunction 
:
{ before(grammarAccess.getFunctionRule()); }
	 ruleFunction
{ after(grammarAccess.getFunctionRule()); } 
	 EOF 
;

// Rule Function
ruleFunction
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getFunctionAccess().getGroup()); }
(rule__Function__Group__0)
{ after(grammarAccess.getFunctionAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRulePrefix
entryRulePrefix 
:
{ before(grammarAccess.getPrefixRule()); }
	 rulePrefix
{ after(grammarAccess.getPrefixRule()); } 
	 EOF 
;

// Rule Prefix
rulePrefix
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getPrefixAccess().getGroup()); }
(rule__Prefix__Group__0)
{ after(grammarAccess.getPrefixAccess().getGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}



// Entry rule entryRuleModifier
entryRuleModifier 
:
{ before(grammarAccess.getModifierRule()); }
	 ruleModifier
{ after(grammarAccess.getModifierRule()); } 
	 EOF 
;

// Rule Modifier
ruleModifier
    @init {
		int stackSize = keepStackSize();
    }
	:
(
{ before(grammarAccess.getModifierAccess().getUnorderedGroup()); }
(rule__Modifier__UnorderedGroup)
{ after(grammarAccess.getModifierAccess().getUnorderedGroup()); }
)

;
finally {
	restoreStackSize(stackSize);
}




// Rule Action
ruleAction
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getActionAccess().getAlternatives()); }
(rule__Action__Alternatives)
{ after(grammarAccess.getActionAccess().getAlternatives()); }
)

;
finally {
	restoreStackSize(stackSize);
}



rule__Module__Alternatives_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModuleAccess().getFunctionsAssignment_2_0()); }
(rule__Module__FunctionsAssignment_2_0)
{ after(grammarAccess.getModuleAccess().getFunctionsAssignment_2_0()); }
)

    |(
{ before(grammarAccess.getModuleAccess().getClassesAssignment_2_1()); }
(rule__Module__ClassesAssignment_2_1)
{ after(grammarAccess.getModuleAccess().getClassesAssignment_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Action__Alternatives
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getActionAccess().getAddEnumLiteralDeclaration_0()); }
(	'+' 
)
{ after(grammarAccess.getActionAccess().getAddEnumLiteralDeclaration_0()); }
)

    |(
{ before(grammarAccess.getActionAccess().getRemoveEnumLiteralDeclaration_1()); }
(	'-' 
)
{ after(grammarAccess.getActionAccess().getRemoveEnumLiteralDeclaration_1()); }
)

    |(
{ before(grammarAccess.getActionAccess().getModifyEnumLiteralDeclaration_2()); }
(	'^' 
)
{ after(grammarAccess.getActionAccess().getModifyEnumLiteralDeclaration_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}



rule__Module__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Module__Group__0__Impl
	rule__Module__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Module__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModuleAccess().getPrefixParserRuleCall_0()); }
	rulePrefix
{ after(grammarAccess.getModuleAccess().getPrefixParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Module__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Module__Group__1__Impl
	rule__Module__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Module__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
(
{ before(grammarAccess.getModuleAccess().getEqualsSignKeyword_1()); }
(
	'=' 
)
{ after(grammarAccess.getModuleAccess().getEqualsSignKeyword_1()); }
)
(
{ before(grammarAccess.getModuleAccess().getEqualsSignKeyword_1()); }
(
	'=' 
)*
{ after(grammarAccess.getModuleAccess().getEqualsSignKeyword_1()); }
)
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Module__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Module__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Module__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModuleAccess().getAlternatives_2()); }
(rule__Module__Alternatives_2)*
{ after(grammarAccess.getModuleAccess().getAlternatives_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Class__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Class__Group__0__Impl
	rule__Class__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Class__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getClassAccess().getPrefixParserRuleCall_0()); }
	rulePrefix
{ after(grammarAccess.getClassAccess().getPrefixParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Class__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Class__Group__1__Impl
	rule__Class__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Class__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getClassAccess().getGroup_1()); }
(rule__Class__Group_1__0)?
{ after(grammarAccess.getClassAccess().getGroup_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Class__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Class__Group__2__Impl
	rule__Class__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Class__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
(
{ before(grammarAccess.getClassAccess().getHyphenMinusKeyword_2()); }
(
	'-' 
)
{ after(grammarAccess.getClassAccess().getHyphenMinusKeyword_2()); }
)
(
{ before(grammarAccess.getClassAccess().getHyphenMinusKeyword_2()); }
(
	'-' 
)*
{ after(grammarAccess.getClassAccess().getHyphenMinusKeyword_2()); }
)
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Class__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Class__Group__3__Impl
	rule__Class__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Class__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getClassAccess().getPropertiesAssignment_3()); }
(rule__Class__PropertiesAssignment_3)*
{ after(grammarAccess.getClassAccess().getPropertiesAssignment_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Class__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Class__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Class__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getClassAccess().getFunctionsAssignment_4()); }
(rule__Class__FunctionsAssignment_4)*
{ after(grammarAccess.getClassAccess().getFunctionsAssignment_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}












rule__Class__Group_1__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Class__Group_1__0__Impl
	rule__Class__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Class__Group_1__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getClassAccess().getColonKeyword_1_0()); }

	':' 

{ after(grammarAccess.getClassAccess().getColonKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Class__Group_1__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Class__Group_1__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Class__Group_1__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getClassAccess().getReturnTypeAssignment_1_1()); }
(rule__Class__ReturnTypeAssignment_1_1)
{ after(grammarAccess.getClassAccess().getReturnTypeAssignment_1_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Property__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Property__Group__0__Impl
	rule__Property__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Property__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPropertyAccess().getPrefixParserRuleCall_0()); }
	rulePrefix
{ after(grammarAccess.getPropertyAccess().getPrefixParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Property__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Property__Group__1__Impl
	rule__Property__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Property__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPropertyAccess().getColonKeyword_1()); }

	':' 

{ after(grammarAccess.getPropertyAccess().getColonKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Property__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Property__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Property__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPropertyAccess().getReturnTypeAssignment_2()); }
(rule__Property__ReturnTypeAssignment_2)
{ after(grammarAccess.getPropertyAccess().getReturnTypeAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}








rule__Function__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Function__Group__0__Impl
	rule__Function__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionAccess().getPrefixParserRuleCall_0()); }
	rulePrefix
{ after(grammarAccess.getFunctionAccess().getPrefixParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Function__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Function__Group__1__Impl
	rule__Function__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionAccess().getLeftParenthesisKeyword_1()); }

	'(' 

{ after(grammarAccess.getFunctionAccess().getLeftParenthesisKeyword_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Function__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Function__Group__2__Impl
	rule__Function__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionAccess().getGroup_2()); }
(rule__Function__Group_2__0)*
{ after(grammarAccess.getFunctionAccess().getGroup_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Function__Group__3
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Function__Group__3__Impl
	rule__Function__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__Group__3__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionAccess().getRightParenthesisKeyword_3()); }

	')' 

{ after(grammarAccess.getFunctionAccess().getRightParenthesisKeyword_3()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Function__Group__4
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Function__Group__4__Impl
	rule__Function__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__Group__4__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionAccess().getGroup_4()); }
(rule__Function__Group_4__0)?
{ after(grammarAccess.getFunctionAccess().getGroup_4()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Function__Group__5
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Function__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__Group__5__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionAccess().getDescriptionAssignment_5()); }
(rule__Function__DescriptionAssignment_5)*
{ after(grammarAccess.getFunctionAccess().getDescriptionAssignment_5()); }
)

;
finally {
	restoreStackSize(stackSize);
}














rule__Function__Group_2__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Function__Group_2__0__Impl
	rule__Function__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__Group_2__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionAccess().getArgsAssignment_2_0()); }
(rule__Function__ArgsAssignment_2_0)
{ after(grammarAccess.getFunctionAccess().getArgsAssignment_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Function__Group_2__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Function__Group_2__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__Group_2__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionAccess().getCommaKeyword_2_1()); }
(
	',' 
)?
{ after(grammarAccess.getFunctionAccess().getCommaKeyword_2_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Function__Group_4__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Function__Group_4__0__Impl
	rule__Function__Group_4__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__Group_4__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionAccess().getColonKeyword_4_0()); }

	':' 

{ after(grammarAccess.getFunctionAccess().getColonKeyword_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Function__Group_4__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Function__Group_4__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Function__Group_4__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionAccess().getReturnTypeAssignment_4_1()); }
(rule__Function__ReturnTypeAssignment_4_1)
{ after(grammarAccess.getFunctionAccess().getReturnTypeAssignment_4_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}






rule__Prefix__Group__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Prefix__Group__0__Impl
	rule__Prefix__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Prefix__Group__0__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrefixAccess().getActionAssignment_0()); }
(rule__Prefix__ActionAssignment_0)
{ after(grammarAccess.getPrefixAccess().getActionAssignment_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Prefix__Group__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Prefix__Group__1__Impl
	rule__Prefix__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Prefix__Group__1__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrefixAccess().getModifiersAssignment_1()); }
(rule__Prefix__ModifiersAssignment_1)
{ after(grammarAccess.getPrefixAccess().getModifiersAssignment_1()); }
)

;
finally {
	restoreStackSize(stackSize);
}


rule__Prefix__Group__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Prefix__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Prefix__Group__2__Impl
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrefixAccess().getNameAssignment_2()); }
(rule__Prefix__NameAssignment_2)
{ after(grammarAccess.getPrefixAccess().getNameAssignment_2()); }
)

;
finally {
	restoreStackSize(stackSize);
}









rule__Modifier__UnorderedGroup
    @init {
    	int stackSize = keepStackSize();
		getUnorderedGroupHelper().enter(grammarAccess.getModifierAccess().getUnorderedGroup());
    }
:
	rule__Modifier__UnorderedGroup__0
	?
	
;
finally {
	getUnorderedGroupHelper().leave(grammarAccess.getModifierAccess().getUnorderedGroup());
	restoreStackSize(stackSize);
}


rule__Modifier__UnorderedGroup__Impl
	@init {
		int stackSize = keepStackSize();
		boolean selected = false;
    }
:
		(

			( 
				{getUnorderedGroupHelper().canSelect(grammarAccess.getModifierAccess().getUnorderedGroup(), 0)}?=>(
					{ 
	 				  getUnorderedGroupHelper().select(grammarAccess.getModifierAccess().getUnorderedGroup(), 0);
	 				}
	 				{
	 				  selected = true;
	 				}
					(
					
						{ before(grammarAccess.getModifierAccess().getPrivateAssignment_0()); }
						(rule__Modifier__PrivateAssignment_0)
						{ after(grammarAccess.getModifierAccess().getPrivateAssignment_0()); }
					)
 				)
			)  |

			( 
				{getUnorderedGroupHelper().canSelect(grammarAccess.getModifierAccess().getUnorderedGroup(), 1)}?=>(
					{ 
	 				  getUnorderedGroupHelper().select(grammarAccess.getModifierAccess().getUnorderedGroup(), 1);
	 				}
	 				{
	 				  selected = true;
	 				}
					(
					
						{ before(grammarAccess.getModifierAccess().getAbstractAssignment_1()); }
						(rule__Modifier__AbstractAssignment_1)
						{ after(grammarAccess.getModifierAccess().getAbstractAssignment_1()); }
					)
 				)
			)  |

			( 
				{getUnorderedGroupHelper().canSelect(grammarAccess.getModifierAccess().getUnorderedGroup(), 2)}?=>(
					{ 
	 				  getUnorderedGroupHelper().select(grammarAccess.getModifierAccess().getUnorderedGroup(), 2);
	 				}
	 				{
	 				  selected = true;
	 				}
					(
					
						{ before(grammarAccess.getModifierAccess().getStaticAssignment_2()); }
						(rule__Modifier__StaticAssignment_2)
						{ after(grammarAccess.getModifierAccess().getStaticAssignment_2()); }
					)
 				)
			)  

		)
;
finally {
	if (selected)
		getUnorderedGroupHelper().returnFromSelection(grammarAccess.getModifierAccess().getUnorderedGroup());
	restoreStackSize(stackSize);
}


rule__Modifier__UnorderedGroup__0
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Modifier__UnorderedGroup__Impl
	rule__Modifier__UnorderedGroup__1?
;
finally {
	restoreStackSize(stackSize);
}


rule__Modifier__UnorderedGroup__1
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Modifier__UnorderedGroup__Impl
	rule__Modifier__UnorderedGroup__2?
;
finally {
	restoreStackSize(stackSize);
}


rule__Modifier__UnorderedGroup__2
    @init {
		int stackSize = keepStackSize();
    }
:
	rule__Modifier__UnorderedGroup__Impl
;
finally {
	restoreStackSize(stackSize);
}








rule__Model__ModulesAssignment
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModelAccess().getModulesModuleParserRuleCall_0()); }
	ruleModule{ after(grammarAccess.getModelAccess().getModulesModuleParserRuleCall_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Module__FunctionsAssignment_2_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModuleAccess().getFunctionsFunctionParserRuleCall_2_0_0()); }
	ruleFunction{ after(grammarAccess.getModuleAccess().getFunctionsFunctionParserRuleCall_2_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Module__ClassesAssignment_2_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModuleAccess().getClassesClassParserRuleCall_2_1_0()); }
	ruleClass{ after(grammarAccess.getModuleAccess().getClassesClassParserRuleCall_2_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Class__ReturnTypeAssignment_1_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getClassAccess().getReturnTypeClassCrossReference_1_1_0()); }
(
{ before(grammarAccess.getClassAccess().getReturnTypeClassIDTerminalRuleCall_1_1_0_1()); }
	RULE_ID{ after(grammarAccess.getClassAccess().getReturnTypeClassIDTerminalRuleCall_1_1_0_1()); }
)
{ after(grammarAccess.getClassAccess().getReturnTypeClassCrossReference_1_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Class__PropertiesAssignment_3
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getClassAccess().getPropertiesPropertyParserRuleCall_3_0()); }
	ruleProperty{ after(grammarAccess.getClassAccess().getPropertiesPropertyParserRuleCall_3_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Class__FunctionsAssignment_4
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getClassAccess().getFunctionsFunctionParserRuleCall_4_0()); }
	ruleFunction{ after(grammarAccess.getClassAccess().getFunctionsFunctionParserRuleCall_4_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Property__ReturnTypeAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPropertyAccess().getReturnTypeClassCrossReference_2_0()); }
(
{ before(grammarAccess.getPropertyAccess().getReturnTypeClassIDTerminalRuleCall_2_0_1()); }
	RULE_ID{ after(grammarAccess.getPropertyAccess().getReturnTypeClassIDTerminalRuleCall_2_0_1()); }
)
{ after(grammarAccess.getPropertyAccess().getReturnTypeClassCrossReference_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Function__ArgsAssignment_2_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionAccess().getArgsIDTerminalRuleCall_2_0_0()); }
	RULE_ID{ after(grammarAccess.getFunctionAccess().getArgsIDTerminalRuleCall_2_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Function__ReturnTypeAssignment_4_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionAccess().getReturnTypeClassCrossReference_4_1_0()); }
(
{ before(grammarAccess.getFunctionAccess().getReturnTypeClassIDTerminalRuleCall_4_1_0_1()); }
	RULE_ID{ after(grammarAccess.getFunctionAccess().getReturnTypeClassIDTerminalRuleCall_4_1_0_1()); }
)
{ after(grammarAccess.getFunctionAccess().getReturnTypeClassCrossReference_4_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Function__DescriptionAssignment_5
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getFunctionAccess().getDescriptionDESCTerminalRuleCall_5_0()); }
	RULE_DESC{ after(grammarAccess.getFunctionAccess().getDescriptionDESCTerminalRuleCall_5_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Prefix__ActionAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrefixAccess().getActionActionEnumRuleCall_0_0()); }
	ruleAction{ after(grammarAccess.getPrefixAccess().getActionActionEnumRuleCall_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Prefix__ModifiersAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrefixAccess().getModifiersModifierParserRuleCall_1_0()); }
	ruleModifier{ after(grammarAccess.getPrefixAccess().getModifiersModifierParserRuleCall_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Prefix__NameAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getPrefixAccess().getNameIDTerminalRuleCall_2_0()); }
	RULE_ID{ after(grammarAccess.getPrefixAccess().getNameIDTerminalRuleCall_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Modifier__PrivateAssignment_0
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModifierAccess().getPrivatePKeyword_0_0()); }
(
{ before(grammarAccess.getModifierAccess().getPrivatePKeyword_0_0()); }

	'p' 

{ after(grammarAccess.getModifierAccess().getPrivatePKeyword_0_0()); }
)

{ after(grammarAccess.getModifierAccess().getPrivatePKeyword_0_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Modifier__AbstractAssignment_1
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModifierAccess().getAbstractCommercialAtKeyword_1_0()); }
(
{ before(grammarAccess.getModifierAccess().getAbstractCommercialAtKeyword_1_0()); }

	'@' 

{ after(grammarAccess.getModifierAccess().getAbstractCommercialAtKeyword_1_0()); }
)

{ after(grammarAccess.getModifierAccess().getAbstractCommercialAtKeyword_1_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}

rule__Modifier__StaticAssignment_2
    @init {
		int stackSize = keepStackSize();
    }
:
(
{ before(grammarAccess.getModifierAccess().getStaticDollarSignKeyword_2_0()); }
(
{ before(grammarAccess.getModifierAccess().getStaticDollarSignKeyword_2_0()); }

	'$' 

{ after(grammarAccess.getModifierAccess().getStaticDollarSignKeyword_2_0()); }
)

{ after(grammarAccess.getModifierAccess().getStaticDollarSignKeyword_2_0()); }
)

;
finally {
	restoreStackSize(stackSize);
}


RULE_DESC : '*' ~(('\n'|'\r'))* ('\r' '\n')?;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'"')))* '"'|'\'' ('\\' ('b'|'t'|'n'|'f'|'r'|'u'|'"'|'\''|'\\')|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;


