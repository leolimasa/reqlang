/*
* generated by Xtext
*/
package com.leo_sa.ui.contentassist.antlr;

import java.util.Collection;
import java.util.Map;
import java.util.HashMap;

import org.antlr.runtime.RecognitionException;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ui.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ui.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

import com.google.inject.Inject;

import com.leo_sa.services.ReqLangGrammarAccess;

public class ReqLangParser extends AbstractContentAssistParser {
	
	@Inject
	private ReqLangGrammarAccess grammarAccess;
	
	private Map<AbstractElement, String> nameMappings;
	
	@Override
	protected com.leo_sa.ui.contentassist.antlr.internal.InternalReqLangParser createParser() {
		com.leo_sa.ui.contentassist.antlr.internal.InternalReqLangParser result = new com.leo_sa.ui.contentassist.antlr.internal.InternalReqLangParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}
	
	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getModuleAccess().getAlternatives_2(), "rule__Module__Alternatives_2");
					put(grammarAccess.getActionAccess().getAlternatives(), "rule__Action__Alternatives");
					put(grammarAccess.getModuleAccess().getGroup(), "rule__Module__Group__0");
					put(grammarAccess.getClassAccess().getGroup(), "rule__Class__Group__0");
					put(grammarAccess.getClassAccess().getGroup_1(), "rule__Class__Group_1__0");
					put(grammarAccess.getPropertyAccess().getGroup(), "rule__Property__Group__0");
					put(grammarAccess.getFunctionAccess().getGroup(), "rule__Function__Group__0");
					put(grammarAccess.getFunctionAccess().getGroup_2(), "rule__Function__Group_2__0");
					put(grammarAccess.getFunctionAccess().getGroup_4(), "rule__Function__Group_4__0");
					put(grammarAccess.getPrefixAccess().getGroup(), "rule__Prefix__Group__0");
					put(grammarAccess.getModelAccess().getModulesAssignment(), "rule__Model__ModulesAssignment");
					put(grammarAccess.getModuleAccess().getFunctionsAssignment_2_0(), "rule__Module__FunctionsAssignment_2_0");
					put(grammarAccess.getModuleAccess().getClassesAssignment_2_1(), "rule__Module__ClassesAssignment_2_1");
					put(grammarAccess.getClassAccess().getReturnTypeAssignment_1_1(), "rule__Class__ReturnTypeAssignment_1_1");
					put(grammarAccess.getClassAccess().getPropertiesAssignment_3(), "rule__Class__PropertiesAssignment_3");
					put(grammarAccess.getClassAccess().getFunctionsAssignment_4(), "rule__Class__FunctionsAssignment_4");
					put(grammarAccess.getPropertyAccess().getReturnTypeAssignment_2(), "rule__Property__ReturnTypeAssignment_2");
					put(grammarAccess.getFunctionAccess().getArgsAssignment_2_0(), "rule__Function__ArgsAssignment_2_0");
					put(grammarAccess.getFunctionAccess().getReturnTypeAssignment_4_1(), "rule__Function__ReturnTypeAssignment_4_1");
					put(grammarAccess.getFunctionAccess().getDescriptionAssignment_5(), "rule__Function__DescriptionAssignment_5");
					put(grammarAccess.getPrefixAccess().getActionAssignment_0(), "rule__Prefix__ActionAssignment_0");
					put(grammarAccess.getPrefixAccess().getModifiersAssignment_1(), "rule__Prefix__ModifiersAssignment_1");
					put(grammarAccess.getPrefixAccess().getNameAssignment_2(), "rule__Prefix__NameAssignment_2");
					put(grammarAccess.getModifierAccess().getPrivateAssignment_0(), "rule__Modifier__PrivateAssignment_0");
					put(grammarAccess.getModifierAccess().getAbstractAssignment_1(), "rule__Modifier__AbstractAssignment_1");
					put(grammarAccess.getModifierAccess().getStaticAssignment_2(), "rule__Modifier__StaticAssignment_2");
					put(grammarAccess.getModifierAccess().getUnorderedGroup(), "rule__Modifier__UnorderedGroup");
				}
			};
		}
		return nameMappings.get(element);
	}
	
	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			com.leo_sa.ui.contentassist.antlr.internal.InternalReqLangParser typedParser = (com.leo_sa.ui.contentassist.antlr.internal.InternalReqLangParser) parser;
			typedParser.entryRuleModel();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}		
	}
	
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}
	
	public ReqLangGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}
	
	public void setGrammarAccess(ReqLangGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
