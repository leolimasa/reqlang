/*
* generated by Xtext
*/
package com.leo_sa.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.eclipse.xtext.common.services.TerminalsGrammarAccess;

@Singleton
public class ReqLangGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Model");
		private final Assignment cModulesAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cModulesModuleParserRuleCall_0 = (RuleCall)cModulesAssignment.eContents().get(0);
		
		//Model:
		//	modules+=Module*;
		public ParserRule getRule() { return rule; }

		//modules+=Module*
		public Assignment getModulesAssignment() { return cModulesAssignment; }

		//Module
		public RuleCall getModulesModuleParserRuleCall_0() { return cModulesModuleParserRuleCall_0; }
	}

	public class ModuleElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Module");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cPrefixParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Assignment cFunctionsAssignment_2_0 = (Assignment)cAlternatives_2.eContents().get(0);
		private final RuleCall cFunctionsFunctionParserRuleCall_2_0_0 = (RuleCall)cFunctionsAssignment_2_0.eContents().get(0);
		private final Assignment cClassesAssignment_2_1 = (Assignment)cAlternatives_2.eContents().get(1);
		private final RuleCall cClassesClassParserRuleCall_2_1_0 = (RuleCall)cClassesAssignment_2_1.eContents().get(0);
		
		//Module:
		//	Prefix "="+ (functions+=Function | classes+=Class)*;
		public ParserRule getRule() { return rule; }

		//Prefix "="+ (functions+=Function | classes+=Class)*
		public Group getGroup() { return cGroup; }

		//Prefix
		public RuleCall getPrefixParserRuleCall_0() { return cPrefixParserRuleCall_0; }

		//"="+
		public Keyword getEqualsSignKeyword_1() { return cEqualsSignKeyword_1; }

		//(functions+=Function | classes+=Class)*
		public Alternatives getAlternatives_2() { return cAlternatives_2; }

		//functions+=Function
		public Assignment getFunctionsAssignment_2_0() { return cFunctionsAssignment_2_0; }

		//Function
		public RuleCall getFunctionsFunctionParserRuleCall_2_0_0() { return cFunctionsFunctionParserRuleCall_2_0_0; }

		//classes+=Class
		public Assignment getClassesAssignment_2_1() { return cClassesAssignment_2_1; }

		//Class
		public RuleCall getClassesClassParserRuleCall_2_1_0() { return cClassesClassParserRuleCall_2_1_0; }
	}

	public class ClassElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Class");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cPrefixParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cColonKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cReturnTypeAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final CrossReference cReturnTypeClassCrossReference_1_1_0 = (CrossReference)cReturnTypeAssignment_1_1.eContents().get(0);
		private final RuleCall cReturnTypeClassIDTerminalRuleCall_1_1_0_1 = (RuleCall)cReturnTypeClassCrossReference_1_1_0.eContents().get(1);
		private final Keyword cHyphenMinusKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cPropertiesAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cPropertiesPropertyParserRuleCall_3_0 = (RuleCall)cPropertiesAssignment_3.eContents().get(0);
		private final Assignment cFunctionsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cFunctionsFunctionParserRuleCall_4_0 = (RuleCall)cFunctionsAssignment_4.eContents().get(0);
		
		//Class:
		//	Prefix (":" returnType=[Class])? "-"+ properties+=Property* functions+=Function*;
		public ParserRule getRule() { return rule; }

		//Prefix (":" returnType=[Class])? "-"+ properties+=Property* functions+=Function*
		public Group getGroup() { return cGroup; }

		//Prefix
		public RuleCall getPrefixParserRuleCall_0() { return cPrefixParserRuleCall_0; }

		//(":" returnType=[Class])?
		public Group getGroup_1() { return cGroup_1; }

		//":"
		public Keyword getColonKeyword_1_0() { return cColonKeyword_1_0; }

		//returnType=[Class]
		public Assignment getReturnTypeAssignment_1_1() { return cReturnTypeAssignment_1_1; }

		//[Class]
		public CrossReference getReturnTypeClassCrossReference_1_1_0() { return cReturnTypeClassCrossReference_1_1_0; }

		//ID
		public RuleCall getReturnTypeClassIDTerminalRuleCall_1_1_0_1() { return cReturnTypeClassIDTerminalRuleCall_1_1_0_1; }

		//"-"+
		public Keyword getHyphenMinusKeyword_2() { return cHyphenMinusKeyword_2; }

		//properties+=Property*
		public Assignment getPropertiesAssignment_3() { return cPropertiesAssignment_3; }

		//Property
		public RuleCall getPropertiesPropertyParserRuleCall_3_0() { return cPropertiesPropertyParserRuleCall_3_0; }

		//functions+=Function*
		public Assignment getFunctionsAssignment_4() { return cFunctionsAssignment_4; }

		//Function
		public RuleCall getFunctionsFunctionParserRuleCall_4_0() { return cFunctionsFunctionParserRuleCall_4_0; }
	}

	public class PropertyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Property");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cPrefixParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cReturnTypeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cReturnTypeClassCrossReference_2_0 = (CrossReference)cReturnTypeAssignment_2.eContents().get(0);
		private final RuleCall cReturnTypeClassIDTerminalRuleCall_2_0_1 = (RuleCall)cReturnTypeClassCrossReference_2_0.eContents().get(1);
		
		//Property:
		//	Prefix ":" returnType=[Class];
		public ParserRule getRule() { return rule; }

		//Prefix ":" returnType=[Class]
		public Group getGroup() { return cGroup; }

		//Prefix
		public RuleCall getPrefixParserRuleCall_0() { return cPrefixParserRuleCall_0; }

		//":"
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }

		//returnType=[Class]
		public Assignment getReturnTypeAssignment_2() { return cReturnTypeAssignment_2; }

		//[Class]
		public CrossReference getReturnTypeClassCrossReference_2_0() { return cReturnTypeClassCrossReference_2_0; }

		//ID
		public RuleCall getReturnTypeClassIDTerminalRuleCall_2_0_1() { return cReturnTypeClassIDTerminalRuleCall_2_0_1; }
	}

	public class FunctionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Function");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cPrefixParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cArgsAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cArgsIDTerminalRuleCall_2_0_0 = (RuleCall)cArgsAssignment_2_0.eContents().get(0);
		private final Keyword cCommaKeyword_2_1 = (Keyword)cGroup_2.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cColonKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Assignment cReturnTypeAssignment_4_1 = (Assignment)cGroup_4.eContents().get(1);
		private final CrossReference cReturnTypeClassCrossReference_4_1_0 = (CrossReference)cReturnTypeAssignment_4_1.eContents().get(0);
		private final RuleCall cReturnTypeClassIDTerminalRuleCall_4_1_0_1 = (RuleCall)cReturnTypeClassCrossReference_4_1_0.eContents().get(1);
		private final Assignment cDescriptionAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cDescriptionDESCTerminalRuleCall_5_0 = (RuleCall)cDescriptionAssignment_5.eContents().get(0);
		
		//Function:
		//	Prefix "(" (args+=ID ","?)* ")" (":" returnType=[Class])? description+=DESC*;
		public ParserRule getRule() { return rule; }

		//Prefix "(" (args+=ID ","?)* ")" (":" returnType=[Class])? description+=DESC*
		public Group getGroup() { return cGroup; }

		//Prefix
		public RuleCall getPrefixParserRuleCall_0() { return cPrefixParserRuleCall_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//(args+=ID ","?)*
		public Group getGroup_2() { return cGroup_2; }

		//args+=ID
		public Assignment getArgsAssignment_2_0() { return cArgsAssignment_2_0; }

		//ID
		public RuleCall getArgsIDTerminalRuleCall_2_0_0() { return cArgsIDTerminalRuleCall_2_0_0; }

		//","?
		public Keyword getCommaKeyword_2_1() { return cCommaKeyword_2_1; }

		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }

		//(":" returnType=[Class])?
		public Group getGroup_4() { return cGroup_4; }

		//":"
		public Keyword getColonKeyword_4_0() { return cColonKeyword_4_0; }

		//returnType=[Class]
		public Assignment getReturnTypeAssignment_4_1() { return cReturnTypeAssignment_4_1; }

		//[Class]
		public CrossReference getReturnTypeClassCrossReference_4_1_0() { return cReturnTypeClassCrossReference_4_1_0; }

		//ID
		public RuleCall getReturnTypeClassIDTerminalRuleCall_4_1_0_1() { return cReturnTypeClassIDTerminalRuleCall_4_1_0_1; }

		//description+=DESC*
		public Assignment getDescriptionAssignment_5() { return cDescriptionAssignment_5; }

		//DESC
		public RuleCall getDescriptionDESCTerminalRuleCall_5_0() { return cDescriptionDESCTerminalRuleCall_5_0; }
	}

	public class PrefixElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Prefix");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cActionAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cActionActionEnumRuleCall_0_0 = (RuleCall)cActionAssignment_0.eContents().get(0);
		private final Assignment cModifiersAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cModifiersModifierParserRuleCall_1_0 = (RuleCall)cModifiersAssignment_1.eContents().get(0);
		private final Assignment cNameAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cNameIDTerminalRuleCall_2_0 = (RuleCall)cNameAssignment_2.eContents().get(0);
		
		//Prefix:
		//	action=Action modifiers=Modifier name=ID;
		public ParserRule getRule() { return rule; }

		//action=Action modifiers=Modifier name=ID
		public Group getGroup() { return cGroup; }

		//action=Action
		public Assignment getActionAssignment_0() { return cActionAssignment_0; }

		//Action
		public RuleCall getActionActionEnumRuleCall_0_0() { return cActionActionEnumRuleCall_0_0; }

		//modifiers=Modifier
		public Assignment getModifiersAssignment_1() { return cModifiersAssignment_1; }

		//Modifier
		public RuleCall getModifiersModifierParserRuleCall_1_0() { return cModifiersModifierParserRuleCall_1_0; }

		//name=ID
		public Assignment getNameAssignment_2() { return cNameAssignment_2; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_2_0() { return cNameIDTerminalRuleCall_2_0; }
	}

	public class ModifierElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Modifier");
		private final UnorderedGroup cUnorderedGroup = (UnorderedGroup)rule.eContents().get(1);
		private final Assignment cPrivateAssignment_0 = (Assignment)cUnorderedGroup.eContents().get(0);
		private final Keyword cPrivatePKeyword_0_0 = (Keyword)cPrivateAssignment_0.eContents().get(0);
		private final Assignment cAbstractAssignment_1 = (Assignment)cUnorderedGroup.eContents().get(1);
		private final Keyword cAbstractCommercialAtKeyword_1_0 = (Keyword)cAbstractAssignment_1.eContents().get(0);
		private final Assignment cStaticAssignment_2 = (Assignment)cUnorderedGroup.eContents().get(2);
		private final Keyword cStaticDollarSignKeyword_2_0 = (Keyword)cStaticAssignment_2.eContents().get(0);
		
		//Modifier:
		//	private?="p"? & abstract?="@"? & static?="$"?;
		public ParserRule getRule() { return rule; }

		//private?="p"? & abstract?="@"? & static?="$"?
		public UnorderedGroup getUnorderedGroup() { return cUnorderedGroup; }

		//private?="p"?
		public Assignment getPrivateAssignment_0() { return cPrivateAssignment_0; }

		//"p"
		public Keyword getPrivatePKeyword_0_0() { return cPrivatePKeyword_0_0; }

		//abstract?="@"?
		public Assignment getAbstractAssignment_1() { return cAbstractAssignment_1; }

		//"@"
		public Keyword getAbstractCommercialAtKeyword_1_0() { return cAbstractCommercialAtKeyword_1_0; }

		//static?="$"?
		public Assignment getStaticAssignment_2() { return cStaticAssignment_2; }

		//"$"
		public Keyword getStaticDollarSignKeyword_2_0() { return cStaticDollarSignKeyword_2_0; }
	}
	
	
	public class ActionElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "Action");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cAddEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cAddPlusSignKeyword_0_0 = (Keyword)cAddEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cRemoveEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cRemoveHyphenMinusKeyword_1_0 = (Keyword)cRemoveEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cModifyEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cModifyCircumflexAccentKeyword_2_0 = (Keyword)cModifyEnumLiteralDeclaration_2.eContents().get(0);
		
		//enum Action:
		//	add="+" | remove="-" | modify="^";
		public EnumRule getRule() { return rule; }

		//add="+" | remove="-" | modify="^"
		public Alternatives getAlternatives() { return cAlternatives; }

		//add="+"
		public EnumLiteralDeclaration getAddEnumLiteralDeclaration_0() { return cAddEnumLiteralDeclaration_0; }

		//"+"
		public Keyword getAddPlusSignKeyword_0_0() { return cAddPlusSignKeyword_0_0; }

		//remove="-"
		public EnumLiteralDeclaration getRemoveEnumLiteralDeclaration_1() { return cRemoveEnumLiteralDeclaration_1; }

		//"-"
		public Keyword getRemoveHyphenMinusKeyword_1_0() { return cRemoveHyphenMinusKeyword_1_0; }

		//modify="^"
		public EnumLiteralDeclaration getModifyEnumLiteralDeclaration_2() { return cModifyEnumLiteralDeclaration_2; }

		//"^"
		public Keyword getModifyCircumflexAccentKeyword_2_0() { return cModifyCircumflexAccentKeyword_2_0; }
	}
	
	private ModelElements pModel;
	private ModuleElements pModule;
	private ClassElements pClass;
	private PropertyElements pProperty;
	private FunctionElements pFunction;
	private PrefixElements pPrefix;
	private TerminalRule tDESC;
	private ActionElements unknownRuleAction;
	private ModifierElements pModifier;
	
	private final Grammar grammar;

	private TerminalsGrammarAccess gaTerminals;

	@Inject
	public ReqLangGrammarAccess(GrammarProvider grammarProvider,
		TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("com.leo_sa.ReqLang".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	
	public Grammar getGrammar() {
		return grammar;
	}
	

	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Model:
	//	modules+=Module*;
	public ModelElements getModelAccess() {
		return (pModel != null) ? pModel : (pModel = new ModelElements());
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}

	//Module:
	//	Prefix "="+ (functions+=Function | classes+=Class)*;
	public ModuleElements getModuleAccess() {
		return (pModule != null) ? pModule : (pModule = new ModuleElements());
	}
	
	public ParserRule getModuleRule() {
		return getModuleAccess().getRule();
	}

	//Class:
	//	Prefix (":" returnType=[Class])? "-"+ properties+=Property* functions+=Function*;
	public ClassElements getClassAccess() {
		return (pClass != null) ? pClass : (pClass = new ClassElements());
	}
	
	public ParserRule getClassRule() {
		return getClassAccess().getRule();
	}

	//Property:
	//	Prefix ":" returnType=[Class];
	public PropertyElements getPropertyAccess() {
		return (pProperty != null) ? pProperty : (pProperty = new PropertyElements());
	}
	
	public ParserRule getPropertyRule() {
		return getPropertyAccess().getRule();
	}

	//Function:
	//	Prefix "(" (args+=ID ","?)* ")" (":" returnType=[Class])? description+=DESC*;
	public FunctionElements getFunctionAccess() {
		return (pFunction != null) ? pFunction : (pFunction = new FunctionElements());
	}
	
	public ParserRule getFunctionRule() {
		return getFunctionAccess().getRule();
	}

	//Prefix:
	//	action=Action modifiers=Modifier name=ID;
	public PrefixElements getPrefixAccess() {
		return (pPrefix != null) ? pPrefix : (pPrefix = new PrefixElements());
	}
	
	public ParserRule getPrefixRule() {
		return getPrefixAccess().getRule();
	}

	//terminal DESC:
	//	"*" !("\n" | "\r")* ("\r" "\n")?;
	public TerminalRule getDESCRule() {
		return (tDESC != null) ? tDESC : (tDESC = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "DESC"));
	} 

	//enum Action:
	//	add="+" | remove="-" | modify="^";
	public ActionElements getActionAccess() {
		return (unknownRuleAction != null) ? unknownRuleAction : (unknownRuleAction = new ActionElements());
	}
	
	public EnumRule getActionRule() {
		return getActionAccess().getRule();
	}

	//Modifier:
	//	private?="p"? & abstract?="@"? & static?="$"?;
	public ModifierElements getModifierAccess() {
		return (pModifier != null) ? pModifier : (pModifier = new ModifierElements());
	}
	
	public ParserRule getModifierRule() {
		return getModifierAccess().getRule();
	}

	//terminal ID:
	//	"^"? ("a".."z" | "A".."Z" | "_") ("a".."z" | "A".."Z" | "_" | "0".."9")*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	} 

	//terminal INT returns ecore::EInt:
	//	"0".."9"+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	} 

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"" | "\'" ("\\" ("b" | "t" |
	//	"n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\'"))* "\'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	} 

	//terminal ML_COMMENT:
	//	"/ *"->"* /";
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	} 

	//terminal SL_COMMENT:
	//	"//" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	} 

	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	} 
}
